<?xml version="1.0" encoding="UTF-8"?>
<!--

       Copyright ${license.git.copyrightYears} the original author or authors.

       Licensed under the Apache License, Version 2.0 (the "License");
       you may not use this file except in compliance with the License.
       You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

       Unless required by applicable law or agreed to in writing, software
       distributed under the License is distributed on an "AS IS" BASIS,
       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       See the License for the specific language governing permissions and
       limitations under the License.

-->
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd"
       default-lazy-init="true">

    <!-- 缓存管理器 -->
    <bean id="shiroCacheManager"
          class="com.soho.shiro.cache.imp.SimpleShiroCacheManager">
        <property name="cache">
            <bean class="com.soho.shiro.cache.imp.ShiroDataCache"/>
        </property>
    </bean>

    <bean id="oAuth2Realm"
          class="com.soho.codegen.shiro.oauth.realm.OAuth2Realm">
        <property name="cacheManager" ref="shiroCacheManager"/>
        <!-- 禁用Shiro自带缓存机制 -->
        <property name="cachingEnabled" value="false"/>
        <property name="authorizationCachingEnabled" value="false"/>
        <property name="authenticationCachingEnabled" value="false"/>
        <property name="authenticationCacheName" value="authenticationCache"/>
        <property name="authorizationCacheName" value="authorizationCache"/>
        <property name="oAuth2Client" ref="oauth2Client"/>
    </bean>

    <!-- OAUTH CLIENT配置 -->
    <bean id="oauth2Client" class="com.soho.shiro.oauth2.aconst.OAuth2Client">
        <property name="client_id" value="${oauth.client_id}"/>
        <property name="client_secret" value="${oauth.client_secret}"/>
        <property name="client_type" value="${oauth.client_type}"/>
        <property name="redirect_uri" value="${oauth.redirect_uri}"/>
        <property name="authorize_code_uri" value="${oauth.authorize_code_uri}"/>
        <property name="access_token_uri" value="${oauth.access_token_uri}"/>
        <property name="userinfo_uri" value="${oauth.userinfo_uri}"/>
    </bean>

    <!-- Session服务器配置 -->
    <bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
        <property name="activeSessionsCache">
            <bean class="com.soho.shiro.cache.imp.ShiroSessionCache"/>
        </property>
        <property name="sessionIdGenerator">
            <bean class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>
        </property>
    </bean>

    <!-- Session会话管理器配置 -->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <!-- Session存放Redis服务器 -->
        <property name="sessionDAO" ref="sessionDAO"/>
        <!-- Session有效时间,单位毫秒 -->
        <property name="globalSessionTimeout" value="1800000"/>
        <!-- 禁用Session失效校验监听 -->
        <property name="sessionValidationSchedulerEnabled" value="false"/>
        <!-- Session ID名称,默认JSEESIONID -->
        <property name="sessionIdCookie.name" value="access_token"/>
        <!-- 删除失效的session -->
        <!--<property name="deleteInvalidSessions" value="true"/>-->
    </bean>

    <!-- Shiro默认会使用Servlet容器的Session,可通过sessionMode属性来指定使用Shiro原生Session -->
    <!-- 即<property name="sessionMode" value="native"/>,详细说明见官方文档 -->
    <!-- 这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realms">
            <list>
                <ref bean="oAuth2Realm"/>
            </list>
        </property>
        <!-- 使用配置的缓存管理器 -->
        <property name="cacheManager" ref="shiroCacheManager"/>
        <!-- 会话管理 -->
        <property name="sessionManager" ref="sessionManager"/>
    </bean>

    <bean id="oAuthClientService" class="com.soho.shiro.oauth2.server.imp.OAuthClientServiceImp"/>

    <!-- Shiro主过滤器本身功能十分强大,其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 -->
    <!-- Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!-- Shiro的核心安全接口,这个属性是必须的 -->
        <property name="securityManager" ref="securityManager"/>
        <!-- 要求登录时的链接(可根据项目的URL进行替换),非必须的属性,默认会自动寻找Web工程根目录下的"/login.jsp"页面 -->
        <property name="loginUrl" value="/"/>
        <!-- 登录成功后要跳转的连接(本例中此属性用不到,因为登录成功后的处理逻辑在LoginController里硬编码为main.jsp了) -->
        <!--<property name="successUrl" value="/admin/advertise/index"/>-->
        <!-- 用户访问未对其授权的资源时,所显示的连接 -->
        <!-- 若想更明显的测试此属性可以修改它的值,如unauthor.jsp,然后用[玄玉]登录后访问/admin/listUser.jsp就看见浏览器会显示unauthor.jsp -->
        <property name="unauthorizedUrl" value="/static/unauthorized.html"/>
        <!-- Shiro连接约束配置,即过滤链的定义 -->
        <!-- 此处可配合这篇文章来理解各个过滤连的作用http://blog.csdn.net/jadyer/article/details/12172839 -->
        <!-- 下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的 -->
        <!-- anon：它对应的过滤器里面是空的,什么都没做,这里.do和.jsp后面的*表示参数,比方说login.jsp?main这种 -->
        <!-- authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter -->
        <property name="filters">
            <map>
                <entry key="oauth2">
                    <bean class="com.soho.shiro.oauth2.client.OAuth2AuthenticationFilter">
                        <property name="authcCodeParam" value="code"/>
                        <property name="successUrl" value="${oauth.index_uri}"/>
                        <property name="failureUrl" value="/static/unauthorized.html"/>
                    </bean>
                </entry>
                <entry key="authc">
                    <bean class="com.soho.shiro.filter.SimpleOAuth2AuthenticationFilter">
                        <property name="oAuth2Client" ref="oauth2Client"/>
                    </bean>
                </entry>
                <entry key="role">
                    <bean class="com.soho.shiro.filter.SimpleRoleAuthorizationFilter">
                        <property name="redirect_uri" value="${oauth.redirect_uri}"/>
                    </bean>
                </entry>
            </map>
        </property>
    </bean>

    <bean class="com.soho.codegen.shiro.service.imp.SimpleFilterChainDefinitionsService" init-method="initDefinitions"
          lazy-init="false">
        <property name="definitions">
            <value>
                /client/logout*=anon
                /client/oauth*=oauth2
                /codegen/generate* = authc
                /codegen/getZipFile* = authc
                /codegen/downFile* = authc
            </value>
        </property>
    </bean>

    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

</beans>